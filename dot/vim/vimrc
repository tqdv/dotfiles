" pkg: vim
" version: 1.1.0
" Header {{{
" help:
"   - :help options
"   - :options
" filename: ~/.vim/vimrc
" notes:
"   - do not use this vimrc as root (modelines are enabled)
"   - viminfo location is ~/.vim/viminfo
"   - noexpandtab
"   - :Nu[mbers]
"   - :L[ist]
"   - Q :noh[lsearch]
"   - ~~ switch character case
"   - ~` switch line case
"   - <C-(H|J|K|L)> <C-W>(h|j|k|l)
"   - i_jkj <Esc>
"   - v_<Space><Space> <Esc>
"   - v_* and v_# work like Normal mode
" }}}

" General settings {{{
set nocompatible
set encoding=utf-8
"" History {{{
set viminfo='100,<100,s10,n$HOME/.vim/viminfo
" ' file with marks
" < register lines
" s register size in kB
" n filename
set history=50
"" }}}
"" Colors {{{
set background=dark
try
    colorscheme industry
catch
endtry
"" }}}
" }}}

" Interface {{{
"" Command-line status {{{
set showmode
set showcmd
set ruler
set laststatus=2 " Always show status-line
"" }}}
"" Left side {{{
set number
set relativenumber
set numberwidth=4
" cf _togglenumbers_
"set foldcolumn=2
"" }}}
"" Command-line {{{
set langmenu=en
set wildmenu " Enable visual autocomplete
"" }}}
" }}}

" Behaviour {{{
"" Search {{{
set wrapscan
set hlsearch
set redrawtime=1000
" cf _hlmap_
set magic
" cf _v_star_
"" }}}
"" Windows {{{
set splitbelow
set splitright
"" }}}
"" Operations behaviour {{{
set nostartofline " Movements go to the first column and not first character
set nojoinspaces " J adds only one space after punctuation
set tildeop
" cf _tilderemap_
"" }}}
set timeoutlen=300
" }}}

" Tabs {{{
" cf _tabnav_
" }}}


" Files {{{
filetype plugin indent on
syntax enable
"" Filetypes {{{
" .md -> markdown (instead of modula2)
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:is_bash = 1 " .sh is bash
autocmd BufNewFile,BufReadPost *.tpp set filetype=cpp " C++ header files
"" }}}
set modeline
" }}}

" Commands {{{
"" _togglenumbers_ {{{
function ToggleNumbers()
	if &number || &relativenumber
		set nonumber
		set norelativenumber
	else
		set number
		set relativenumber
	endif
endfunction
command Numbers call ToggleNumbers()
"" }}}
command List set list!
" open current file in leafpad (if it exists)
command Leaf !leafpad %
" }}}

" Text Display {{{
set lazyredraw
set listchars=tab:» ,trail:·,eol:↵,extends:},precedes:{,nbsp:%
set scrolloff=3 " Lines around the cursor
"" Line max length {{{
"set textwidth=80
"set colorcolumn=+1
set colorcolumn=81
"" }}}
" }}}

" Editing {{{
"" Matching {{{
set showmatch " jump briefly
set matchtime=2 " in tenths of seconds
"set matchpairs+=<:>
highlight MatchParen ctermbg=grey ctermfg=black
"" }}}
"" Wrapping {{{
set backspace=2 " Expected behaviour
set whichwrap=b,s,<,>,[,] " <BS>, <Space>, <Left>, <Right>
"" }}}
"" Tab and Indent {{{
set autoindent " Copies last line's indent
set smartindent " C-like indent
set noexpandtab
" for expandtab
set smarttab
set tabstop=4
set shiftwidth=4
"" }}}
" }}}

" Keyboard {{{
map Y y$
"" _hlmap_ {{{
noremap Q <Nop>
nnoremap <silent> Q <Esc>:noh<CR>
"" }}}
"" Keep selection when indenting {{{
vnoremap < <gv
vnoremap > >gv
"" }}}
"" _v_star_ {{{
" In two parts because we need to update @" before escaping it.
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
"" }}}
"" tab navigation _tabnav_ {{{
nnoremap <Tab> gt
nnoremap <S-Tab> gT
"" }}}
"" _tilderemap_ {{{
nnoremap ~~ ~l
nnoremap ~` ~~
"" }}}
"" Windows navigation {{{
nnoremap <C-H> <C-W>h
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
"" }}}
"" map <Esc> {{{
inoremap jkj <Esc>
vnoremap <Space><Space> <Esc>
"" }}}
" }}}

" vim: fdm=marker fdl=1 fdc=2
